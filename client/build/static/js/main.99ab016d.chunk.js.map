{"version":3,"sources":["utils/queries.js","utils/helpers.js","pages/Home.js","pages/NotFound.js","App.js","index.js"],"names":["GET_STATE_AND_OCCUPATION","gql","checkInputs","input","match","Home","useQuery","loading","data","console","log","useState","email","setEmail","password","setPassword","contactName","setContactName","occupation","setOccupation","etat","setEtat","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","occupationAndStateList","className","map","state","abbreviation","htmlFor","onChange","type","id","placeholder","onClick","preventDefault","test","String","toLowerCase","validatePassword","NotFound","location","useLocation","pathname","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99ab016d.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\n// export const QUERY_MATCHUPS = gql`\n//   query matchups($_id: String) {\n//     matchups(_id: $_id) {\n//       _id\n//       tech1\n//       tech2\n//       tech1_votes\n//       tech2_votes\n//     }\n//   }\n// `;\n\n\nexport const QUERY_STATE = gql`\n  query states {\n    states {\n      name\n      abbreviation\n    }\n  }\n`;\n\nexport const QUERY_OCCUPATION = gql`\n  query occupation {\n    occupation {\n      name\n    }\n  }\n`;\n\nexport const QUERY_FORM = gql`\n  query form {\n    form {\n      name\n      email\n      password\n      occupation\n      state\n    }\n  }\n`;\n\nexport const GET_STATE_AND_OCCUPATION = gql`\n  query getStateAndOccupation {\n    getStateAndOccupation {\n        stateAndOccupationData\n      }\n  }\n`;\n\nexport const POST_FORM = gql`\n  query postFormDetails($formData: JSON) {\n    postFormDetails(formData: $formData) {\n      formData\n    }\n  }\n`;\n\n// export const POST_FORM = gql`\n//   query postFormDetails($name: String!, $email: String!, $password: String!, $occupation: String!, $state: String!) {\n//     postFormDetails(name: $name, email: $email, password: $password, occupation: $occupation, state: $state) {\n//       name\n//       email\n//       password\n//       occupation\n//       state\n//     }\n//   }\n// `;\n\n\n// use front end javascript to jsonify the input. Send the thign over as JSON obkect????","export function validateEmail(input) {\n  const email = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return email.test(String(input).toLowerCase());\n}\n\nexport function validatePassword(input) {\n  const password = /^[A-Za-z]\\w{7,14}$/;\n  if (input.match(password)) {\n    return true;\n  }\n  return false;\n}\n\nexport function checkInputs(input) {\n  const userinput = /^$/;\n  if (input.match(userinput)) {\n    return false;\n  }\n  return true;\n}\n","// import { Link } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_STATE_AND_OCCUPATION } from '../utils/queries';\n\nimport { validateEmail, checkInputs, validatePassword } from '../utils/helpers';\n\nconst Home = () => {\n  const { loading, data } = useQuery(GET_STATE_AND_OCCUPATION, {\n    // fetchPolicy: \"no-cache\"\n  }, []);\n  console.log(loading);\n  console.log(data);\n\n\n  //===================================================\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [contactName, setContactName] = useState('');\n  const [occupation, setOccupation] = useState('');\n  const [etat, setEtat] = useState(''); // Using \"Ã‰tat\" as a substitute for \"State\" to avoid potentially messing with React states.\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    if (inputType === 'contactName') {\n      setContactName(inputValue);\n    } else if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'password') {\n      setPassword(inputValue);\n    } else if (inputType === 'occupation') {\n      setOccupation(inputValue);\n    } else if (inputType === 'etat') {\n      setEtat(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    if (!checkInputs(contactName)) {\n      setErrorMessage(`Name is required.`);\n      return;\n    }\n\n    if (!validateEmail(email)) {\n      setErrorMessage('Email is invalid');\n      return;\n    }\n\n    if (!validatePassword(password)) {\n      setErrorMessage('Password is invalid');\n      //consist 8-15 chars, first character must A-Z or a-z, the next 17-14 chars a word char (\\w) - (A-Z, a-z, 0-9, _)\n      return;\n    }\n\n    if (!checkInputs(occupation)) {\n      setErrorMessage(`Occupation is required.`);\n      return;\n    }\n\n    if (!checkInputs(etat)) {\n      setErrorMessage(`State is required.`);\n      return;\n    }\n\n    setContactName('');\n    setEmail('');\n    setPassword('');\n    setOccupation('');\n    setEtat('');\n  };\n  //===================================================\n\n\n\n  // const matchupList = data?.matchups || [];\n  const occupationAndStateList = data || [];\n\n  return (\n    <div className=\"card bg-white card-rounded w-50\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>Welcome to Tech Matchup!</h1>\n      </div>\n      <div className=\"card-body m-5\">\n        <h2>Here is a list of matchups you can vote on:</h2>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <ul className=\"square\">\n            {occupationAndStateList.map((state) => {\n              return (\n                <li>\n                  {state.name}\n                  <br />\n                  {state.abbreviation}\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n\n      <section className=\"h-100 bisection bisection-3 col-lg-6\">\n        <h1 className=\"bisection-h1 bisection-3-h1\">contact form</h1>\n        <form>\n          <div className=\"form-group mb-2\">\n            <label htmlFor=\"contact-name\">Name</label>\n            <input\n              value={contactName}\n              name=\"contactName\"\n              onChange={handleInputChange}\n              type=\"contactName\"\n              className=\"form-control\"\n              id=\"contact-name\"\n              placeholder=\"Sammy Sample\" />\n          </div>\n          <div className=\"form-group mb-2\">\n            <label htmlFor=\"email\">Email address</label>\n            <input\n              value={email}\n              name=\"email\"\n              onChange={handleInputChange}\n              type=\"email\"\n              className=\"form-control\"\n              id=\"email\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter email\" />\n          </div>\n          <div className=\"form-group mb-2\">\n            <label htmlFor=\"password\">Password</label>\n            <input\n              value={password}\n              name=\"password\"\n              onChange={handleInputChange}\n              type=\"password\"\n              className=\"form-control\"\n              id=\"password\"\n              placeholder=\"abcd1234\" />\n          </div>\n\n          <div className=\"form-group col-md-4\">\n            <label htmlFor=\"inputState\">State</label>\n            {/* <select id=\"inputState\" class=\"form-control\"> */}\n\n            {loading ? (\n              <div>Loading...</div>\n            ) : (\n              <select id=\"inputState\" className=\"form-control\">\n                {occupationAndStateList.map((occupation) => {\n                  return (\n                    <option>\n                      {occupation}\n                    </option>\n                  );\n                })}\n              </select>\n            )}\n\n            {/* <option selected>Choose...</option>\n              <option>...</option> */}\n            {/* </select> */}\n          </div>\n\n\n          {/* <div className=\"form-group col-md-4\">\n            <label htmlFor=\"inputState\">State</label>\n            {loading ? (\n              <div>Loading...</div>\n            ) : (\n              <select id=\"inputState\" class=\"form-control\">\n                {occupationAndStateList.map((state) => {\n                  return (\n                    <option>\n                      {state.name}\n                    </option>\n                  );\n                })}\n              </select>\n            )}\n          </div> */}\n\n\n          <button type=\"submit\" className=\"btn btn-primary\" onClick={handleFormSubmit}>Submit</button>\n        </form>\n        {errorMessage && (\n          <div>\n            <p className=\"error-text\">{errorMessage}</p>\n          </div>\n        )}\n      </section>\n\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction NotFound() {\n  let location = useLocation();\n  return (\n    <div className=\"card bg-white card-rounded w-50\">\n      <div className=\"card-header bg-dark text-center\">\n        <h1>\n          No match for <code>{location.pathname}</code>\n        </h1>\n      </div>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Home from './pages/Home';\nimport NotFound from './pages/NotFound';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-center align-center min-100-vh bg-primary\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route>\n              <NotFound />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}